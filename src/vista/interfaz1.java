package vista;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author emanuelyepesmolina
 */
import controlador.CControl;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import modelo.CContacto;

public class interfaz1 extends javax.swing.JFrame {

     //modelo para manipular la tabla
    DefaultTableModel modelo;
    
    //instancia del objeto para interactuar con la capa de control
    CControl c=new CControl();
    
    /**
     * Creates new form interfaz
     */
    public interfaz1() {
        initComponents();

        //inicio el modelo para manipular la tabla
        modelo = (DefaultTableModel) tabla.getModel();

        // Mostrar líneas de la tabla
        tabla.setShowHorizontalLines(true);
        tabla.setShowVerticalLines(true);

        // Color de las líneas
        tabla.setGridColor(java.awt.Color.BLACK);
    }

    // Métodos de la vista que llaman al controlador

    private void refrescarTabla(ArrayList<CContacto> lista) {
        modelo.setRowCount(0);
        for (CContacto contacto : lista) {
            modelo.addRow(new Object[]{
                contacto.getId(),
                contacto.getNombres(),
                contacto.getApellidos(),
                contacto.getTelefono(),
                contacto.getDireccion(),
                contacto.getEmail()
            });
        }
    }
        
    public Connection conectar() {

        //String usuario="root";
        //String contrasena="";
        //String url="jdbc:mysql://localhost:3306/agenda"; 
        Connection conect = null;

        String usuario = "root";
        String contrasena = "";
        String url = "jdbc:mysql://localhost:3306/agenda";
    
        try {
            conect = DriverManager.getConnection(url, usuario, contrasena);
            salida.setText("Conexión correcta");
            return conect;
        } catch (Exception e) {
            salida.setText("Conexión incorrecta");
            return null;
        }
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lnombres = new javax.swing.JLabel();
        lapellidos = new javax.swing.JLabel();
        nombres = new java.awt.TextArea();
        apellidos = new java.awt.TextArea();
        ltelefono = new javax.swing.JLabel();
        telefono = new java.awt.TextArea();
        ldireccion = new javax.swing.JLabel();
        direccion = new java.awt.TextArea();
        jLabel6 = new javax.swing.JLabel();
        email = new java.awt.TextArea();
        insertar = new java.awt.Button();
        consulta = new java.awt.Button();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        salida = new java.awt.TextArea();
        borrar = new javax.swing.JButton();
        editar = new javax.swing.JButton();
        buscarpornombre = new javax.swing.JButton();
        buscarporapellido = new javax.swing.JButton();
        buscarporid = new javax.swing.JButton();
        listarporciudad = new javax.swing.JButton();
        listarcalleslistarcarreras = new javax.swing.JButton();
        filtarporprefijo = new javax.swing.JButton();
        ordenaralfabeticamente = new javax.swing.JButton();
        idspares = new javax.swing.JButton();
        idsimpares = new javax.swing.JButton();
        listarcampo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Agenda Telefónica");

        lnombres.setText("Nombres:");

        lapellidos.setText("Apellidos:");

        ltelefono.setText("Teléfono:");

        ldireccion.setText("Dirección:");

        jLabel6.setText("Email:");

        insertar.setActionCommand("Insertar");
        insertar.setLabel("Insertar");
        insertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertarActionPerformed(evt);
            }
        });

        consulta.setActionCommand("Consultar");
        consulta.setLabel("Consultar");
        consulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultaActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombres", "Apellidos", "Télefonos", "Dirección", "Email"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        borrar.setText("Borrar contacto");
        borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarActionPerformed(evt);
            }
        });

        editar.setText("Editar contacto");
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        buscarpornombre.setText("Buscar por Nombre");
        buscarpornombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarpornombreActionPerformed(evt);
            }
        });

        buscarporapellido.setText("Buscar por Apellido");
        buscarporapellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarporapellidoActionPerformed(evt);
            }
        });

        buscarporid.setText("Buscar por ID");
        buscarporid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarporidActionPerformed(evt);
            }
        });

        listarporciudad.setText("Listar por Ciudad");

        listarcalleslistarcarreras.setText("Listar Calles y Listar Carreras");
        listarcalleslistarcarreras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarcalleslistarcarrerasActionPerformed(evt);
            }
        });

        filtarporprefijo.setText("Filtrar por Prefijo");
        filtarporprefijo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtarporprefijoActionPerformed(evt);
            }
        });

        ordenaralfabeticamente.setText("Ordenar Alfabéticamente");

        idspares.setText("IDs Pares");
        idspares.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idsparesActionPerformed(evt);
            }
        });

        idsimpares.setText("IDs Impares");
        idsimpares.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idsimparesActionPerformed(evt);
            }
        });

        listarcampo.setText("Listar Campo");
        listarcampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarcampoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(lnombres)
                        .addGap(19, 19, 19)
                        .addComponent(nombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lapellidos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ltelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(telefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(salida, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(insertar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buscarpornombre)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buscarporapellido)
                                        .addGap(18, 18, 18)
                                        .addComponent(buscarporid))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(listarporciudad)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(listarcalleslistarcarreras)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(filtarporprefijo))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(178, 178, 178)
                                        .addComponent(idspares)
                                        .addGap(18, 18, 18)
                                        .addComponent(idsimpares)
                                        .addGap(23, 23, 23)
                                        .addComponent(listarcampo))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(consulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ordenaralfabeticamente))
                                .addGap(18, 18, 18)
                                .addComponent(borrar)
                                .addGap(18, 18, 18)
                                .addComponent(editar))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ldireccion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(188, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nombres, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lnombres)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lapellidos)
                        .addComponent(apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ltelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(ldireccion)
                        .addComponent(direccion, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(insertar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(consulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(borrar)
                        .addComponent(editar)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buscarpornombre)
                    .addComponent(buscarporapellido)
                    .addComponent(buscarporid))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listarporciudad)
                    .addComponent(listarcalleslistarcarreras)
                    .addComponent(filtarporprefijo))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ordenaralfabeticamente)
                    .addComponent(idspares)
                    .addComponent(idsimpares)
                    .addComponent(listarcampo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(salida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        insertar.getAccessibleContext().setAccessibleName("Insertar");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertarActionPerformed
        CContacto contacto = new CContacto(
                0,
                nombres.getText(),
                apellidos.getText(),
                telefono.getText(),
                direccion.getText(),
                email.getText()
        );

        if (c.insertar(contacto)) {
            salida.setText("Contacto insertado correctamente");
            refrescarTabla(c.listarTodos());
        } else {
            salida.setText("Error al insertar el contacto. Verifique los datos");
        }
    }//GEN-LAST:event_insertarActionPerformed

    private void consultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultaActionPerformed
        refrescarTabla(c.listarTodos());
        salida.setText("Consulta completada");
    }//GEN-LAST:event_consultaActionPerformed

    private void borrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarActionPerformed
        int fila = tabla.getSelectedRow();
        if (fila == -1) {
            salida.setText("Seleccione un contacto para borrar");
            return;
        }
        int id = (int) modelo.getValueAt(fila, 0);
        if (c.borrar(id)) {
            salida.setText("Contacto borrado correctamente");
            refrescarTabla(c.listarTodos());
        } else {
            salida.setText("Error al borrar contacto");
        }
    }//GEN-LAST:event_borrarActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        int fila = tabla.getSelectedRow();
        if (fila == -1) {
            salida.setText("Seleccione un contacto para editar");
            return;
        }

        int id = (int) modelo.getValueAt(fila, 0);
        CContacto contacto = new CContacto(
                id,
                nombres.getText(),
                apellidos.getText(),
                telefono.getText(),
                direccion.getText(),
                email.getText()
        );

        if (c.editar(contacto)) {
            salida.setText("Contacto editado correctamente");
            refrescarTabla(c.listarTodos());
        } else {
            salida.setText("Error al editar contacto");
        }
    }//GEN-LAST:event_editarActionPerformed

    private void buscarpornombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarpornombreActionPerformed
        String valor = nombres.getText();
        if (valor.isEmpty()) {
            salida.setText("Ingrese un nombre o iniciales para buscar");
            return;
        }
        refrescarTabla(c.buscarPorNombre(valor));
        salida.setText("Búsqueda por nombre completada");
    }//GEN-LAST:event_buscarpornombreActionPerformed

    private void buscarporapellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarporapellidoActionPerformed
        String valor = apellidos.getText();
        if (valor.isEmpty()) {
            salida.setText("Ingrese un apellido o iniciales para buscar");
            return;
        }
        refrescarTabla(c.buscarPorApellido(valor));
        salida.setText("Búsqueda por apellido completada");
    }//GEN-LAST:event_buscarporapellidoActionPerformed

    private void buscarporidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarporidActionPerformed
         String valor = JOptionPane.showInputDialog("Ingrese el ID a buscar");
        if (valor == null || valor.isEmpty()) {
            salida.setText("No se ingresó ningún ID");
            return;
        }
        int id = Integer.parseInt(valor);
        CContacto contacto = c.buscarPorId(id);
        modelo.setRowCount(0);
        if (contacto != null) {
            modelo.addRow(new Object[]{
                contacto.getId(),
                contacto.getNombres(),
                contacto.getApellidos(),
                contacto.getTelefono(),
                contacto.getDireccion(),
                contacto.getEmail()
            });
            salida.setText("Búsqueda por ID completada");
        } else {
            salida.setText("No se encontró el contacto con ese ID");
        }
    }//GEN-LAST:event_buscarporidActionPerformed

    private void listarcalleslistarcarrerasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarcalleslistarcarrerasActionPerformed
        ArrayList<CContacto> listaCalles = c.listarCalles();
        ArrayList<CContacto> listaCarreras = c.listarCarreras();
        modelo.setRowCount(0);
        for (CContacto contacto : listaCalles) {
            modelo.addRow(new Object[]{
                contacto.getId(),
                contacto.getNombres(),
                contacto.getApellidos(),
                contacto.getDireccion(),
                "", ""
            });
        }
        for (CContacto contacto : listaCarreras) {
            modelo.addRow(new Object[]{
                contacto.getId(),
                contacto.getNombres(),
                contacto.getApellidos(),
                "", contacto.getDireccion(), ""
            });
        }
        salida.setText("Listado de calles y carreras completado");
    }//GEN-LAST:event_listarcalleslistarcarrerasActionPerformed

    private void filtarporprefijoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtarporprefijoActionPerformed
        String prefijo = JOptionPane.showInputDialog("Ingrese el prefijo (ej: 310)");
        if (prefijo == null || prefijo.isEmpty()) {
            salida.setText("No se ingresó prefijo");
            return;
        }
        refrescarTabla(c.filtrarPorPrefijo(prefijo));
        salida.setText("Filtrado por prefijo completado");
    }//GEN-LAST:event_filtarporprefijoActionPerformed

    private void idsparesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idsparesActionPerformed
        refrescarTabla(c.listarIDPares());
        salida.setText("Listado de IDs pares completado");
    }//GEN-LAST:event_idsparesActionPerformed

    private void idsimparesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idsimparesActionPerformed
        refrescarTabla(c.listarIDImpares());
        salida.setText("Listado de IDs impares completado");
    }//GEN-LAST:event_idsimparesActionPerformed

    private void listarcampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarcampoActionPerformed
        String campo = JOptionPane.showInputDialog("Ingrese el campo a listar (nombres, apellidos, telefono, direccion, email)");
        if (campo == null || campo.isEmpty()) {
            salida.setText("No se ingresó ningún campo");
            return;
        }
        ArrayList<String> lista = c.listarCampoEspecifico(campo);
        modelo.setRowCount(0);
        for (String valor : lista) {
            modelo.addRow(new Object[]{valor});
        }
        salida.setText("Listado del campo " + campo + " completado");
    }//GEN-LAST:event_listarcampoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interfaz1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interfaz1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interfaz1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfaz1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.TextArea apellidos;
    private javax.swing.JButton borrar;
    private javax.swing.JButton buscarporapellido;
    private javax.swing.JButton buscarporid;
    private javax.swing.JButton buscarpornombre;
    private java.awt.Button consulta;
    private java.awt.TextArea direccion;
    private javax.swing.JButton editar;
    private java.awt.TextArea email;
    private javax.swing.JButton filtarporprefijo;
    private javax.swing.JButton idsimpares;
    private javax.swing.JButton idspares;
    private java.awt.Button insertar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lapellidos;
    private javax.swing.JLabel ldireccion;
    private javax.swing.JButton listarcalleslistarcarreras;
    private javax.swing.JButton listarcampo;
    private javax.swing.JButton listarporciudad;
    private javax.swing.JLabel lnombres;
    private javax.swing.JLabel ltelefono;
    private java.awt.TextArea nombres;
    private javax.swing.JButton ordenaralfabeticamente;
    private java.awt.TextArea salida;
    private javax.swing.JTable tabla;
    private java.awt.TextArea telefono;
    // End of variables declaration//GEN-END:variables
}


